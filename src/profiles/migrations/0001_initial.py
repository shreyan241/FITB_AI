# Generated by Django 5.1.3 on 2025-02-19 09:19

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import profiles.utils.storage.resume_storage
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Skill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into the admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "auth0_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique identifier from Auth0",
                        max_length=100,
                        null=True,
                        unique=True,
                        verbose_name="Auth0 ID",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this user has verified their email through Auth0.",
                        verbose_name="email verified",
                    ),
                ),
                (
                    "auth0_metadata",
                    models.JSONField(
                        blank=True,
                        help_text="Additional user metadata from Auth0",
                        null=True,
                        verbose_name="Auth0 metadata",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=100)),
                ("last_name", models.CharField(blank=True, max_length=100)),
                (
                    "application_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email to use for job applications. If blank, account email will be used.",
                        max_length=255,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                ("phone_number", models.CharField(blank=True, max_length=20)),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("city", models.CharField(blank=True, max_length=100)),
                ("state", models.CharField(blank=True, max_length=100)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("skills", models.ManyToManyField(blank=True, to="profiles.skill")),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="EqualEmploymentData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "authorized_us",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=3,
                        null=True,
                        verbose_name="Are you authorized to work in the US?",
                    ),
                ),
                (
                    "authorized_canada",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=3,
                        null=True,
                        verbose_name="Are you authorized to work in Canada?",
                    ),
                ),
                (
                    "authorized_uk",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=3,
                        null=True,
                        verbose_name="Are you authorized to work in the United Kingdom?",
                    ),
                ),
                (
                    "requires_sponsorship",
                    models.CharField(
                        blank=True,
                        choices=[("Yes", "Yes"), ("No", "No")],
                        max_length=3,
                        null=True,
                        verbose_name="Will you now or in the future require sponsorship for employment visa status?",
                    ),
                ),
                (
                    "ethnicities",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("Black/African American", "Black/African American"),
                                ("East Asian", "East Asian"),
                                ("South Asian", "South Asian"),
                                ("Hispanic/Latinx", "Hispanic/Latinx"),
                                ("Southeast Asian", "Southeast Asian"),
                                ("Middle Eastern", "Middle Eastern"),
                                ("African", "African"),
                                ("Native American/Alaskan", "Native American/Alaskan"),
                                (
                                    "Native Hawaiian/Other Pacific Islander",
                                    "Native Hawaiian/Other Pacific Islander",
                                ),
                                ("White", "White"),
                            ],
                            max_length=100,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="What is your ethnicity? (Select all that apply)",
                    ),
                ),
                (
                    "is_hispanic_latinx",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="Hispanic/Latinx"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Male", "Male"),
                            ("Female", "Female"),
                            ("Non-Binary", "Non-Binary"),
                            ("Decline to state", "Decline to state"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="What is your gender?",
                    ),
                ),
                (
                    "has_disability",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("Decline to state", "Decline to state"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Do you have a disability?",
                    ),
                ),
                (
                    "is_lgbtq",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("Decline to state", "Decline to state"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Do you identify as LGBTQ+?",
                    ),
                ),
                (
                    "is_veteran",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Yes", "Yes"),
                            ("No", "No"),
                            ("Decline to state", "Decline to state"),
                        ],
                        max_length=20,
                        null=True,
                        verbose_name="Are you a veteran?",
                    ),
                ),
                (
                    "user_profile",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="equal_employment_data",
                        to="profiles.userprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "Equal Employment Data",
                "verbose_name_plural": "Equal Employment Data",
            },
        ),
        migrations.CreateModel(
            name="Education",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("school_name", models.CharField(max_length=255)),
                (
                    "degree_type",
                    models.CharField(
                        choices=[
                            ("High School", "High School"),
                            ("Associate's", "Associate's"),
                            ("Bachelor's", "Bachelor's"),
                            ("Master's", "Master's"),
                            ("PhD", "PhD"),
                            ("MBA", "MBA"),
                            ("MD", "MD"),
                            ("JD", "JD"),
                            ("Bootcamp", "Bootcamp"),
                            ("Certification", "Certification"),
                            ("Other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("major", models.CharField(blank=True, max_length=255)),
                ("minor", models.CharField(blank=True, max_length=255)),
                (
                    "start_month",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ]
                    ),
                ),
                ("start_year", models.IntegerField()),
                (
                    "end_month",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                ("end_year", models.IntegerField(blank=True, null=True)),
                ("is_current", models.BooleanField(default=False)),
                (
                    "gpa",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4),
                        ],
                    ),
                ),
                (
                    "user_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="education",
                        to="profiles.userprofile",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Education",
                "ordering": ["-start_year", "-start_month"],
            },
        ),
        migrations.CreateModel(
            name="WorkExperience",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("company", models.CharField(max_length=255)),
                ("position_title", models.CharField(max_length=255)),
                (
                    "employment_type",
                    models.CharField(
                        choices=[
                            ("Full-time", "Full-time"),
                            ("Part-time", "Part-time"),
                            ("Contract", "Contract"),
                            ("Temporary", "Temporary"),
                            ("Internship", "Internship"),
                            ("Apprenticeship", "Apprenticeship"),
                            ("Freelance", "Freelance"),
                            ("Volunteer", "Volunteer"),
                            ("Other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("country", models.CharField(max_length=100)),
                ("is_remote", models.BooleanField(default=False)),
                (
                    "start_month",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ]
                    ),
                ),
                ("start_year", models.IntegerField()),
                (
                    "end_month",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(12),
                        ],
                    ),
                ),
                ("end_year", models.IntegerField(blank=True, null=True)),
                ("is_current", models.BooleanField(default=False)),
                ("description", models.TextField()),
                (
                    "user_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="work_experiences",
                        to="profiles.userprofile",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Work Experience",
                "ordering": ["-start_year", "-start_month"],
            },
        ),
        migrations.CreateModel(
            name="SocialLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "platform",
                    models.CharField(
                        choices=[
                            ("LinkedIn", "LinkedIn"),
                            ("GitHub", "GitHub"),
                            ("Twitter", "Twitter"),
                            ("Portfolio", "Portfolio"),
                            ("Other", "Other"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "url",
                    models.URLField(validators=[django.core.validators.URLValidator()]),
                ),
                (
                    "user_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="social_links",
                        to="profiles.userprofile",
                    ),
                ),
            ],
            options={
                "unique_together": {("user_profile", "platform")},
            },
        ),
        migrations.CreateModel(
            name="Resume",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="A unique title for this resume", max_length=100
                    ),
                ),
                ("original_filename", models.CharField(max_length=255)),
                ("s3_key", models.CharField(max_length=255, unique=True)),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        storage=profiles.utils.storage.resume_storage.ResumeStorage(),
                        upload_to="",
                    ),
                ),
                ("is_default", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resumes",
                        to="profiles.userprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("user_profile", "title"),
                        name="unique_resume_title_per_user",
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(("is_default", True)),
                        fields=("user_profile",),
                        name="unique_default_resume",
                    ),
                ],
            },
        ),
    ]
